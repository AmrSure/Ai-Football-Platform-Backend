version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: football_platform_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-football_platform}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - football_platform_network

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: football_platform_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - football_platform_network

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: football_platform_web
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production_deploy
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-False}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DB_NAME=${DB_NAME:-football_platform}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - football_platform_network
    command: >
      sh -c "python manage.py migrate --settings=config.settings.production_deploy &&
             python manage.py collectstatic --noinput --settings=config.settings.production_deploy &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --timeout 30"

  # Celery Worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: football_platform_celery
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production_deploy
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-False}
      - DB_NAME=${DB_NAME:-football_platform}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - football_platform_network
    command: celery -A config worker --loglevel=info

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: football_platform_celery_beat
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production_deploy
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-False}
      - DB_NAME=${DB_NAME:-football_platform}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - football_platform_network
    command: celery -A config beat --loglevel=info

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: football_platform_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - web
    networks:
      - football_platform_network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  football_platform_network:
    driver: bridge
